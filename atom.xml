<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>anDongCoder</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-31T12:03:13.957Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Andong Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ajax学习笔记</title>
    <link href="http://yoursite.com/2018/10/31/Ajax&amp;Json/"/>
    <id>http://yoursite.com/2018/10/31/Ajax&amp;Json/</id>
    <published>2018-10-31T11:54:36.525Z</published>
    <updated>2018-10-31T12:03:13.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax学习笔记"><a href="#Ajax学习笔记" class="headerlink" title="Ajax学习笔记"></a>Ajax学习笔记</h3><h3 id="一、js原生Ajax"><a href="#一、js原生Ajax" class="headerlink" title="一、js原生Ajax"></a>一、js原生Ajax</h3><h4 id="1）ajax请求步骤"><a href="#1）ajax请求步骤" class="headerlink" title="1）ajax请求步骤"></a>1）ajax请求步骤</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//理解原生JavaScript使用Ajax的原理和步骤</span></span><br><span class="line"><span class="comment">// 1 创建Ajax引擎对象</span></span><br><span class="line">     <span class="keyword">var</span> xmlhttp;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">                &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">                    xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">                    xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//2 编写监听ajax引擎对象的回调函数。 xmlhttp对象的状态发生改变时该方法都会执行</span></span><br><span class="line">xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//  4 是服务器处理完毕      200是请求OK</span></span><br><span class="line">                <span class="keyword">if</span>(xmlhttp.readyState ==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">                   <span class="keyword">var</span> text =  xmlhttp.responseText;    <span class="comment">//响应信息</span></span><br><span class="line">                   alert(text);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//3 设置请求的方式和路径</span></span><br><span class="line">xmlhttp.open(<span class="string">"get/post"</span>,<span class="string">"请求路径"</span>)；</span><br><span class="line"><span class="comment">//4 发送ajax请求</span></span><br><span class="line">    xmlhttp.send();</span><br></pre></td></tr></table></figure><h4 id="2）xmlhttp对象的属性"><a href="#2）xmlhttp对象的属性" class="headerlink" title="2）xmlhttp对象的属性"></a>2）xmlhttp对象的属性</h4><ul><li><p>onreadystatechange事件<br>在ajax对象状态发生改变时,就会触发该事件<br>对象.onreadystatechange = function(){<br>}</p></li><li><p>readyState</p><p>存有 XMLHttpRequest 的状态</p><ul><li>0: 请求未初始化</li><li>1: 服务器连接已建立</li><li>2: 请求已接收</li><li>3: 请求处理中</li><li>4: 请求已完成，且响应已就绪</li></ul></li><li><p>status<br>响应状态码<br>if(xmlhttp.readyState==4 &amp;&amp; xmlhttp.status == 200){<br>​    执行的代码片段<br>}</p></li><li><p>responseText<br>获取服务器响应回来的文本信息</p></li></ul><h4 id="3）请求携带参数问题"><a href="#3）请求携带参数问题" class="headerlink" title="3）请求携带参数问题"></a>3）请求携带参数问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Get请求携带参数</span><br><span class="line">       <span class="comment">//3 设置请求方式和请求路径</span></span><br><span class="line">       xmlhttp.open(<span class="string">"get"</span>,<span class="string">"../demo1?val="</span>+val);     <span class="comment">//直接将参数拼接到路径后面</span></span><br><span class="line">Post请求携带参数</span><br><span class="line">    <span class="comment">//设置请求参数的mime类型</span></span><br><span class="line">       xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">       <span class="comment">//4 发送请求</span></span><br><span class="line">       xmlhttp.send(<span class="string">"val="</span>+val+<span class="string">"&amp;val1=val1"</span>);      </span><br><span class="line">       <span class="comment">// 携带参宿作为send函数的参数   </span></span><br><span class="line">    注意：post携带参数 一定要设置请求参数的mim类型</span><br></pre></td></tr></table></figure><h3 id="二-jQuery框架的Ajax"><a href="#二-jQuery框架的Ajax" class="headerlink" title="二 jQuery框架的Ajax"></a>二 jQuery框架的Ajax</h3><p><strong>个人理解</strong></p><p>jQuery一共三种方式发送ajax请求，语法形式上有一些差异，可以根据自己的习惯选择使用。</p><p>值得注意的时 回调函数的参数时服务器响应回来的数据。</p><h4 id="1）API"><a href="#1）API" class="headerlink" title="1）API"></a>1）API</h4><table><thead><tr><th style="text-align:left">请求方式</th><th>语法</th></tr></thead><tbody><tr><td style="text-align:left">GET请求</td><td>$.get(url, [data], [callback], [type])</td></tr><tr><td style="text-align:left">POST请求</td><td>$.post(url, [data], [callback], [type])</td></tr><tr><td style="text-align:left">AJAX请求</td><td>$.ajax([settings])</td></tr><tr><td style="text-align:left">新增GET请求</td><td>$.get([settings])</td></tr><tr><td style="text-align:left">新增POST请求</td><td>$.post([settings])</td></tr></tbody></table><h4 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2)代码演示"></a>2)代码演示</h4><h5 id="方式一-post-url-params-fn-type"><a href="#方式一-post-url-params-fn-type" class="headerlink" title="方式一  $.post(url,[params],fn,[type])"></a>方式一  $.post(url,[params],fn,[type])</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- url:请求的路径</span><br><span class="line"> - params:请求的参数</span><br><span class="line">    - 格式<span class="number">1</span>:字符串 key1=value1&amp;key2=value2      <span class="comment">//第一次做案例时  这里出错</span></span><br><span class="line">    - 格式<span class="number">2</span>:json格式  &#123;<span class="string">"key1"</span>:value1,<span class="string">"key2"</span>:value2&#125;</span><br><span class="line">       </span><br><span class="line"> 回调函数</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">       <span class="comment">//data:响应回来的数据 （xmlHttp.responseText）</span></span><br><span class="line">    &#125;</span><br><span class="line">- type:返回内容的格式      默认返回text类型的数据</span><br><span class="line">       一般不需要自己设置,如果需要设置一般设置为 <span class="string">"json"</span></span><br></pre></td></tr></table></figure><h5 id="方式二-ajax-url-settings"><a href="#方式二-ajax-url-settings" class="headerlink" title="方式二 $.ajax({url,[settings]})"></a>方式二 $.ajax({url,[settings]})</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- url:请求路径</span><br><span class="line">- type:请求方式</span><br><span class="line">- data:请求参数</span><br><span class="line">- success:请求成功后的回调函数</span><br><span class="line">- error:请求失败时调用此函数</span><br><span class="line">- dataType:服务器返回的数据类型</span><br><span class="line">  一般不需要自己设置,如果需要设置一般设置为 <span class="string">"json"</span></span><br><span class="line">- <span class="keyword">async</span>:设置是否异步提交 默认值为<span class="literal">true</span>(异步提交)</span><br><span class="line">- 例如:</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">  url:url,</span><br><span class="line">  data:params,</span><br><span class="line">  type:<span class="string">"post"</span>,</span><br><span class="line">  success:f,</span><br><span class="line">  error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">"失败了"</span>)&#125;,</span><br><span class="line">  <span class="keyword">async</span>:<span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">- 注意事项: 默认get方式提交</span><br></pre></td></tr></table></figure><h5 id="方式三-get-settings-post-settings"><a href="#方式三-get-settings-post-settings" class="headerlink" title="方式三 $.get([settings])  $.post([settings])"></a>方式三 $.get([settings])  $.post([settings])</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- url:请求路径</span><br><span class="line">- data:请求参数</span><br><span class="line">- success:请求成功后的回调函数</span><br><span class="line">- error:请求失败时调用此函数</span><br><span class="line">- dataType:服务器返回的数据类型</span><br><span class="line">  一般不需要自己设置,如果需要设置一般设置为 <span class="string">"json"</span></span><br><span class="line">- <span class="keyword">async</span>:设置是否异步提交 默认值为<span class="literal">true</span>(异步提交)</span><br></pre></td></tr></table></figure><h5 id="POST请求代码演示"><a href="#POST请求代码演示" class="headerlink" title="POST请求代码演示"></a>POST请求代码演示</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST请求    一共三种方式 根据自己喜好使用 语法上简单的差异</span></span><br><span class="line">        </span><br><span class="line">            <span class="keyword">var</span> url =<span class="string">"../demo2"</span>;</span><br><span class="line">            <span class="keyword">var</span> params = <span class="string">"val="</span>+val+<span class="string">"&amp;val1=val1"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 方式一 jQuery POST提交</span></span><br><span class="line">            $.post(url,params,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                $(<span class="string">"#sp1"</span>).html(data);</span><br><span class="line">            &#125;,<span class="string">"text"</span>)</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 方式二  新增签名方式</span></span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url:url,</span><br><span class="line">                data:params,</span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                    $(<span class="string">"#sp1"</span>).html(data);</span><br><span class="line">                &#125;,</span><br><span class="line">                dataType:<span class="string">"text"</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 方式三  通用方法</span></span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">                type:<span class="string">"post"</span>,</span><br><span class="line">                url:url,</span><br><span class="line">                data:params,</span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                    $(<span class="string">"#sp1"</span>).html(data);</span><br><span class="line">                &#125;,</span><br><span class="line">                dataType:<span class="string">"text"</span></span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><h5 id="GET请求代码演示"><a href="#GET请求代码演示" class="headerlink" title="GET请求代码演示"></a>GET请求代码演示</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">var</span> url =<span class="string">"../demo2"</span>;</span><br><span class="line">       <span class="keyword">var</span> params = <span class="string">"val="</span>+val+<span class="string">"&amp;val1=val1"</span>;</span><br><span class="line"><span class="comment">// 方式一  GET提交</span></span><br><span class="line">       $.get(url,params,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">           $(<span class="string">"#sp2"</span>).html(data);</span><br><span class="line">       &#125;,<span class="string">"text"</span>)*<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ 方式二  新增签名方式</span></span><br><span class="line"><span class="regexp">       $.get(&#123;</span></span><br><span class="line"><span class="regexp">           url:url,</span></span><br><span class="line"><span class="regexp">           data:params,</span></span><br><span class="line"><span class="regexp">           success:function(data)&#123;</span></span><br><span class="line"><span class="regexp">               $("#sp2").html(data);</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">       &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ 方式三 通用方式</span></span><br><span class="line"><span class="regexp">        $.ajax(&#123;</span></span><br><span class="line"><span class="regexp">            type:"get",</span></span><br><span class="line"><span class="regexp">            url:url,</span></span><br><span class="line"><span class="regexp">            data:params,</span></span><br><span class="line"><span class="regexp">            success:function(data)&#123;</span></span><br><span class="line"><span class="regexp">                $("#sp2").html(data);</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            dataType:"text"</span></span><br><span class="line"><span class="regexp">          &#125;)</span></span><br></pre></td></tr></table></figure><h3 id="三-JSON"><a href="#三-JSON" class="headerlink" title="三 JSON"></a>三 JSON</h3><h4 id="1）三种格式"><a href="#1）三种格式" class="headerlink" title="1）三种格式"></a>1）三种格式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 json对象</span></span><br><span class="line">     <span class="keyword">var</span> jsonObj = &#123;<span class="string">"name"</span>:<span class="string">"李安冬"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;;</span><br><span class="line">     alert(jsonObj.name+<span class="string">":"</span>+jsonObj.age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 json数组</span></span><br><span class="line">     <span class="keyword">var</span> jsonArr = [<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"赵六"</span>,<span class="string">"孙七"</span>,<span class="string">"仝海娜"</span>];</span><br><span class="line">     alert(jsonArr[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 混合类型     </span></span><br><span class="line">     <span class="comment">// 分为两种 1 数组包含json对象   2 json对象包含数组</span></span><br><span class="line">     <span class="keyword">var</span> json = &#123;</span><br><span class="line">         class:"黑马72",</span><br><span class="line">         count:<span class="number">94</span>,</span><br><span class="line">         student:[&#123;<span class="string">"name"</span>:<span class="string">"李安冬"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"仝海娜"</span>,<span class="string">"age"</span>:<span class="number">3</span>&#125;]</span><br><span class="line">     &#125;</span><br><span class="line">     alert(json.student[<span class="number">1</span>].name+<span class="string">":"</span>+json.student[<span class="number">1</span>].age);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> json1 = [</span><br><span class="line">         &#123;<span class="string">"name"</span>:<span class="string">"李安冬"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;,</span><br><span class="line">         &#123;<span class="string">"name"</span>:<span class="string">"仝海娜"</span>,<span class="string">"age"</span>:<span class="number">3</span>&#125;,</span><br><span class="line">         <span class="string">"heima72"</span>,</span><br><span class="line">         <span class="number">94</span></span><br><span class="line">     ]</span><br><span class="line"></span><br><span class="line">     alert(json1[<span class="number">1</span>].name+<span class="string">":"</span>+json1[<span class="number">1</span>].age);</span><br></pre></td></tr></table></figure><h4 id="2）json转换工具"><a href="#2）json转换工具" class="headerlink" title="2）json转换工具"></a>2）json转换工具</h4><h4 id="常见工具类-四种"><a href="#常见工具类-四种" class="headerlink" title="常见工具类  四种"></a>常见工具类  四种</h4><h5 id="jsonlib"><a href="#jsonlib" class="headerlink" title="jsonlib"></a>jsonlib</h5><ul><li>1.导入jar包</li><li>2.使用api<ul><li>JSONArray.fromObject(数组或者list)</li><li>JSONObject.fromObject(对象或者map)</li></ul></li></ul><h5 id="fastjson-阿里巴巴"><a href="#fastjson-阿里巴巴" class="headerlink" title="fastjson(阿里巴巴)"></a>fastjson(阿里巴巴)</h5><ul><li>JSON.toJSONString(str)<br>可以转一切对象</li></ul><h5 id="gson-google"><a href="#gson-google" class="headerlink" title="gson(google)"></a>gson(google)</h5><ul><li>使用步骤:<ul><li>1.Gson g = new Gson();</li><li>2.g.toJson(对象);<br>可以转一切对象</li></ul></li></ul><h5 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h5><p>开源免费的json转换工具，springmvc转换默认使用jackson</p><ul><li>导入json相关jar包</li><li>创建核心解析对象<ul><li>ObjectMapper om = new ObjectMapper();</li><li>om.writeValueAsString(obj)</li></ul></li></ul><h4 id="3）Jackson使用"><a href="#3）Jackson使用" class="headerlink" title="3）Jackson使用"></a>3）Jackson使用</h4><p>转换java四种对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建工具类对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 数组</span></span><br><span class="line">        String [] names = &#123;<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"赵六"</span>,<span class="string">"孙七"</span>,<span class="string">"呵呵"</span>,<span class="string">"哈哈"</span>&#125;;</span><br><span class="line">        String arrJson = mapper.writeValueAsString(names);</span><br><span class="line">        System.out.println(<span class="string">"Array转成json:"</span>+arrJson);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 List集合</span></span><br><span class="line">        List&lt;String&gt; nameList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        nameList.add(<span class="string">"宝强"</span>);</span><br><span class="line">        nameList.add(<span class="string">"乃亮"</span>);</span><br><span class="line">        nameList.add(<span class="string">"头发"</span>);</span><br><span class="line">        nameList.add(<span class="string">"小璐"</span>);</span><br><span class="line">        nameList.add(<span class="string">"马蓉"</span>);</span><br><span class="line"></span><br><span class="line">        String listJson = mapper.writeValueAsString(nameList);</span><br><span class="line">        System.out.println(<span class="string">"List转成json:"</span>+listJson);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// map</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"仝海娜"</span>);</span><br><span class="line">        map.put(<span class="string">"age"</span>,<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">        String mapJson = mapper.writeValueAsString(map);</span><br><span class="line">        System.out.println(<span class="string">"Map转成json:"</span>+mapJson);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// User</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"admin"</span>, <span class="number">10</span>);</span><br><span class="line">        String userJson = mapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(<span class="string">"User对象转成json:"</span>+userJson);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实体集合</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"迪丽热巴"</span>,<span class="number">0</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"刘诗诗"</span>,<span class="number">1</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"吴奇隆"</span>,<span class="number">2</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"景甜"</span>,<span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"唐嫣"</span>,<span class="number">4</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"张雨绮"</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        String userListJson = mapper.writeValueAsString(userList);</span><br><span class="line">        System.out.println(<span class="string">"User集合对象转成json:"</span>+userListJson);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四-Ajax案例"><a href="#四-Ajax案例" class="headerlink" title="四 Ajax案例"></a>四 Ajax案例</h3><h4 id="1）用户名校验-前端Ajax请求代码"><a href="#1）用户名校验-前端Ajax请求代码" class="headerlink" title="1）用户名校验  前端Ajax请求代码"></a>1）用户名校验  前端Ajax请求代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">serch</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> params =<span class="string">"username="</span>+val;</span><br><span class="line">            <span class="keyword">var</span> url=<span class="string">"anli1"</span>;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url:url,</span><br><span class="line">                data:params,</span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  <span class="comment">//后台查询数据库后 返回 0||1</span></span><br><span class="line">                    <span class="keyword">if</span>(data==<span class="number">1</span>)&#123;</span><br><span class="line">                        $(<span class="string">"#nameMsg"</span>).html(<span class="string">"&lt;font color='green'&gt;√&lt;/font&gt;"</span>)</span><br><span class="line">                        $(<span class="string">"input[type='submit']"</span>).attr(<span class="string">"disabled"</span>,<span class="literal">false</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $(<span class="string">"#nameMsg"</span>).html(<span class="string">"&lt;font color='red'&gt;用户名已存在&lt;/font&gt;"</span>)</span><br><span class="line">                        $(<span class="string">"input[type='submit']"</span>).attr(<span class="string">"disabled"</span>,<span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">---被校验的搜算框</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;用户名:&lt;/</span>td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> onblur=<span class="string">"serch(this.value)"</span>&gt;</span><br><span class="line">                &lt;span id=<span class="string">"nameMsg"</span>&gt;&lt;/span&gt;</span><br><span class="line">            &lt;<span class="regexp">/td&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）搜索框关键字匹配相关热搜词"><a href="#2）搜索框关键字匹配相关热搜词" class="headerlink" title="2）搜索框关键字匹配相关热搜词"></a>2）搜索框关键字匹配相关热搜词</h4><p>例如百度搜索时 会根据用户输入值匹配四条相关搜索词</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">keyUpFun</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">"anli2"</span>;</span><br><span class="line">            <span class="keyword">var</span> params = <span class="string">"keyWord="</span>+obj.value;</span><br><span class="line">           $.post(url,params,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(data.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                   $(<span class="string">".show"</span>).empty();</span><br><span class="line">                   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">                       $(<span class="string">".show"</span>).append(<span class="string">"&lt;div&gt;"</span>+data[i]+<span class="string">"&lt;/div&gt;"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">                   $(<span class="string">".show"</span>).show();</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   $(<span class="string">".show"</span>).hide();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,<span class="string">"json"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">--html关键代码：</span></span><br><span class="line"><span class="regexp">            &lt;input type="text" name="word" onkeyup="keyUpFun(this)"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;input type="button" value="搜索一下"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="show"&gt;&lt;/</span>div&gt;</span><br><span class="line">--后台思路以及关键代码</span><br><span class="line">  <span class="number">1</span> 键盘弹起后将搜索框中的值发到后台，进行模糊查询 最多匹配四条记录</span><br><span class="line">  <span class="number">2</span> 将匹配的记录的字段封装到List集合中</span><br><span class="line">  <span class="number">3</span> 用jackjson将list集合转换成json格式 并响应</span><br><span class="line">  </span><br><span class="line">  sql： <span class="built_in">String</span> sql = <span class="string">"select name from user where name like ? limit 4"</span>;</span><br><span class="line">        List&lt;<span class="built_in">String</span>&gt; names = template.queryForList(sql, <span class="built_in">String</span>.class, <span class="string">"%"</span> + keyWord + <span class="string">"%"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ajax学习笔记&quot;&gt;&lt;a href=&quot;#Ajax学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Ajax学习笔记&quot;&gt;&lt;/a&gt;Ajax学习笔记&lt;/h3&gt;&lt;h3 id=&quot;一、js原生Ajax&quot;&gt;&lt;a href=&quot;#一、js原生Ajax&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx&amp;tomcat搭建负载均衡</title>
    <link href="http://yoursite.com/2018/10/31/Nginx&amp;tomcat%E6%90%AD%E5%BB%BA%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yoursite.com/2018/10/31/Nginx&amp;tomcat搭建负载均衡/</id>
    <published>2018-10-31T11:54:36.421Z</published>
    <updated>2018-10-31T12:00:38.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-amp-tomcat搭建负载均衡"><a href="#Nginx-amp-tomcat搭建负载均衡" class="headerlink" title="Nginx&amp;tomcat搭建负载均衡"></a>Nginx&amp;tomcat搭建负载均衡</h1><h2 id="1、Nginx介绍以及简单使用"><a href="#1、Nginx介绍以及简单使用" class="headerlink" title="1、Nginx介绍以及简单使用"></a>1、Nginx介绍以及简单使用</h2><h3 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h3><p>​    Nginx是一种服务器软件，其最主要，最基本的功能是可以与服务器硬件结合，让程序员可以将程序发布在Nginx服务器上，让成千上万的用户可以浏览</p><h3 id="Nginx作用"><a href="#Nginx作用" class="headerlink" title="Nginx作用"></a>Nginx作用</h3><ul><li>展示静态页面</li><li>反向代理（负载均衡）</li><li>邮件服务器</li></ul><h3 id="Nginx安装-Linux"><a href="#Nginx安装-Linux" class="headerlink" title="Nginx安装(Linux)"></a>Nginx安装(Linux)</h3><ul><li><p><a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a> 下载Linux版本  解压即可</p></li><li><p>安装需要有C环境</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Nginx是C语言开发，建议在Linux上运行，安装Nginx需要先将官网下载的源码进行编译，编译依赖gcc环境；所以</span><br><span class="line">需要安装gcc。</span><br><span class="line"><span class="comment">//安装命令</span></span><br><span class="line">yum -y install gcc‐c++</span><br></pre></td></tr></table></figure></li><li><p>安装nginx</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装Nginx依赖环境，‐y表示所有提示默认选择y </span></span><br><span class="line">   yum ‐y install pcre pcre‐devel   </span><br><span class="line">   yum ‐y install zlib zlib‐devel   </span><br><span class="line">   yum ‐y install openssl openssl‐devel </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 解压下载下来的文件，并进入解压文件夹 </span></span><br><span class="line">   tar ‐xvf nginx‐<span class="number">1.13</span>.9.tar.gz ‐C/usr/local </span><br><span class="line">   cd /usr/local/nginx‐<span class="number">1.13</span>.9 </span><br><span class="line"></span><br><span class="line"><span class="comment">//编译并安装 </span></span><br><span class="line">   ./configure </span><br><span class="line">   make </span><br><span class="line">   make install</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//安装成功之后,就会在/usr/local下多出了一个nginx目录</span></span><br></pre></td></tr></table></figure></li><li><p>最后一步 配置防火墙对口   /etc/sysconfig/iptables</p></li></ul><h3 id="Nginx基本命令-Linux"><a href="#Nginx基本命令-Linux" class="headerlink" title="Nginx基本命令(Linux)"></a>Nginx基本命令(Linux)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 进入nginx的sbin目录</span><br><span class="line"><span class="number">2</span> 在sbin目录下启动 </span><br><span class="line">  ./nginx</span><br><span class="line"><span class="number">3</span> 在sbin目录下停止 </span><br><span class="line">  ./nginx ‐s stop </span><br><span class="line"><span class="number">4</span> 在sbin目录下重新加载 </span><br><span class="line">  ./nginx ‐s reload</span><br><span class="line">  </span><br><span class="line"><span class="comment">//查看是否有nginx的线程是否存在 </span></span><br><span class="line">  ps ‐ef | grep nginx </span><br><span class="line"><span class="comment">// 重新加载防火墙的命令</span></span><br><span class="line">  systemctl restart iptables.serice</span><br></pre></td></tr></table></figure><h2 id="2、搭建负载均衡"><a href="#2、搭建负载均衡" class="headerlink" title="2、搭建负载均衡"></a>2、搭建负载均衡</h2><p>​    使用一个nginx服务器和三台tomcat服务器实现负载均衡</p><h3 id="windows环境"><a href="#windows环境" class="headerlink" title="windows环境"></a>windows环境</h3><p>windows环境下，首先解压三个tomcat服务器，修改tomcat服务器中的端口，避免多台tomcat同时启动端口占用问题。</p><p><strong>配置tomcat端口：</strong></p><p>修改三处端口信息 如下图:</p><p><img src="Nginx&amp;tomcat搭建负载均衡.assets/1540972490433.png" alt="1540972490433"></p><p><img src="Nginx&amp;tomcat搭建负载均衡.assets/1540972543169.png" alt="1540972543169"></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Nginx&tomcat搭建负载均衡.assets/1540972587974.png" alt="1540972587974" title="">                </div>                <div class="image-caption">1540972587974</div>            </figure><p><strong>配置nginx配置文件：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Nginx&tomcat搭建负载均衡.assets/1540972990516-1540974465892.png" alt="1540972990516" title="">                </div>                <div class="image-caption">1540972990516</div>            </figure><p><strong>启动：</strong></p><p>同时启动三个tomcat服务器和nginx服务器，在浏览器中访问nginx服务器，请求被代理服务器发送到不同的tomcat上进行处理。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><strong>在linux系统下搭建负载均衡服务器，与windows上的思路一样，只是具体操作上的差压。</strong></p><p>不要忘了去防火墙配置文件那里配置tomcat和端口。</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx-amp-tomcat搭建负载均衡&quot;&gt;&lt;a href=&quot;#Nginx-amp-tomcat搭建负载均衡&quot; class=&quot;headerlink&quot; title=&quot;Nginx&amp;amp;tomcat搭建负载均衡&quot;&gt;&lt;/a&gt;Nginx&amp;amp;tomcat搭建负载
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="http://yoursite.com/2018/10/31/IO%E6%B5%81/"/>
    <id>http://yoursite.com/2018/10/31/IO流/</id>
    <published>2018-10-31T11:54:36.410Z</published>
    <updated>2018-10-31T12:01:48.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h3 id="一、IO四大流"><a href="#一、IO四大流" class="headerlink" title="一、IO四大流"></a>一、IO四大流</h3><p><strong>字节输入流</strong>：读字节数据</p><p>​                       共同父类: InputStream(抽象类)</p><p><strong>字节输出流</strong>：写字节数据</p><p>​            共同父类：OutputStream(抽象类)</p><p><strong>字符输入流</strong>：读字符文件</p><p>​            共同父类：Reader(抽象类)</p><p><strong>字符输出流</strong>：写字符数据</p><p>​            共同父类：Writer(抽象类)</p><h3 id="二、字节流"><a href="#二、字节流" class="headerlink" title="二、字节流"></a>二、字节流</h3><h4 id="2-1-字节输出流"><a href="#2-1-字节输出流" class="headerlink" title="2.1 字节输出流"></a>2.1 字节输出流</h4><p><strong>父类:OutputStream(抽象类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>; <span class="comment">//关闭流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>; <span class="comment">//刷新流 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>;  <span class="comment">//写一个字节数组到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>FileOutputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a 构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个文件的字节输出流，给定文件路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(String filepath)</span></span>;</span><br><span class="line">    <span class="comment">// 创建一个文件的字节输出流，给定对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(File file)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//b 写字节数据的三个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.写一个字节</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//2.写一个字节数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>;</span><br><span class="line"><span class="comment">//3.写一个字节数组的一部分</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c 如何追加续写</span></span><br><span class="line"><span class="comment">//只要使用带有boolean类型参数的构造即可</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputSream</span><span class="params">(String filepath,<span class="keyword">boolean</span> append)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputSteam</span><span class="params">(String filepath,<span class="keyword">boolean</span> append)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-字节输入流"><a href="#2-2-字节输入流" class="headerlink" title="2.2 字节输入流"></a>2.2 字节输入流</h4><p><strong>父类：InputStream(抽象类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;  <span class="comment">// 释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;   <span class="comment">// 一次只读一个字节</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bs)</span></span>; <span class="comment">// 一次读取一个字节数组，返回实字节个数</span></span><br></pre></td></tr></table></figure><p><strong>FileInputStream</strong></p><p>功能：从文件中读取字节数据</p><ul><li><p><strong>构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(String pathname)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(File file)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>读取一个字节</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>; <span class="comment">// 一次只读取一个字节</span></span><br><span class="line"><span class="comment">//************标准循环***************</span></span><br><span class="line"><span class="keyword">int</span> b;  <span class="comment">//用来保存读取的字节</span></span><br><span class="line"><span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure></li><li><p><strong>读一个字节数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 用来保存实际读取的字节</span></span><br><span class="line"><span class="keyword">while</span>((len = fis.read(bs)) != -<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.print(<span class="keyword">new</span> String(bs,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、字符流"><a href="#三、字符流" class="headerlink" title="三、字符流"></a>三、字符流</h3><h4 id="3-1-为什么要用字符流"><a href="#3-1-为什么要用字符流" class="headerlink" title="3.1 为什么要用字符流"></a>3.1 为什么要用字符流</h4><pre><code>一个英文字母是一个字节，一个中文汉字是2-3个字节</code></pre><p>​    如果使用字节流读取中文，就可能出现读一半的问题。</p><p>​    我们使用字符流，底层会自动判断是英文还是中文</p><p>​             如果是英文，只读取一个字节</p><p>​        如果是中文，会读取2-3个字节</p><h4 id="3-2-字符输入流"><a href="#3-2-字符输入流" class="headerlink" title="3.2 字符输入流"></a>3.2 字符输入流</h4><p><strong>父类：Reader(抽象类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一共有三个读取数据的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>; <span class="comment">// 一次读取一个字符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] chs)</span></span>;  <span class="comment">// 一次读取一个字符数组，返回实际读取字符个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] chs,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>; <span class="comment">// 不常用</span></span><br></pre></td></tr></table></figure><p><strong>FileReader</strong></p><ul><li><p><strong>构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileReader</span><span class="params">(String pathname)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileReader</span><span class="params">(File file)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>读取一个字符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ch = <span class="number">0</span>； <span class="comment">// 保存读取到的字符</span></span><br><span class="line"><span class="keyword">while</span>((ch = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println( (<span class="keyword">char</span>)ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>读取一个字符数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>((len=fr.read(chs)) != -<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.print(<span class="keyword">new</span> String(chs,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-字符输出流"><a href="#3-2-字符输出流" class="headerlink" title="3.2 字符输出流"></a>3.2 字符输出流</h4><p><strong>父类：Writer(抽象类)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;   <span class="comment">//释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;   <span class="comment">//刷新缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 五个写入数据的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> ch)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] chs)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] chs,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span></span>;     <span class="comment">//写入一个字符串  最常使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>FileWriter</strong></p><ul><li><p><strong>构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(String pathname)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(File file)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、缓冲流"><a href="#四、缓冲流" class="headerlink" title="四、缓冲流"></a>四、缓冲流</h3><h4 id="4-1-缓冲流的作用"><a href="#4-1-缓冲流的作用" class="headerlink" title="4.1. 缓冲流的作用"></a>4.1. 缓冲流的作用</h4><p>缓冲流是对昨天学的四种流的增强(提高性能)</p><table><thead><tr><th style="text-align:center">普通流</th><th style="text-align:center">缓冲流</th></tr></thead><tbody><tr><td style="text-align:center">FileInputStream</td><td style="text-align:center">BufferedInputStream</td></tr><tr><td style="text-align:center">FileOutputStream</td><td style="text-align:center">BufferedOutputStream</td></tr><tr><td style="text-align:center">FileReader</td><td style="text-align:center">BuffereReader</td></tr><tr><td style="text-align:center">FileWriter</td><td style="text-align:center">BufferedWriter</td></tr></tbody></table><p><strong>为什么缓冲流的性能高:</strong> 因为缓冲流自带缓冲区,提高性能 降低和硬盘打交道次数</p><h4 id="4-2-字节缓冲流介绍和使用"><a href="#4-2-字节缓冲流介绍和使用" class="headerlink" title="4.2 字节缓冲流介绍和使用"></a>4.2 字节缓冲流介绍和使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream fis)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream fos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法和字节流相同</span></span><br></pre></td></tr></table></figure><h4 id="4-3-字符缓冲流的介绍和使用"><a href="#4-3-字符缓冲流的介绍和使用" class="headerlink" title="4.3 字符缓冲流的介绍和使用"></a>4.3 字符缓冲流的介绍和使用</h4><ul><li><p><strong>构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedReader</span><span class="params">(Reader fr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedWriter</span><span class="params">(Writer fw)</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>特有方法</strong></p><p><strong>BufferedReader多一个特有方法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readline</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//****************标准循环代码***************</span></span><br><span class="line">String line = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BufferedWriter多一个特有方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newline</span><span class="params">()</span></span>;           <span class="comment">//写一个跨平台的换行符五、转换流</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="五、转换流"><a href="#五、转换流" class="headerlink" title="五、转换流"></a>五、转换流</h3><p>  <strong>转换流就是字符流和字节流之间的桥梁   –根据自己需求选择使用</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="IO流.assets/转换流.bmp" alt="转换流" title="">                </div>                <div class="image-caption">转换流</div>            </figure><h4 id="5-1-InputStreamReader"><a href="#5-1-InputStreamReader" class="headerlink" title="5.1 InputStreamReader"></a>5.1 InputStreamReader</h4><p><strong>字节流通向字符流的桥梁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属于字节流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(FileInputStream fis)</span></span>;      <span class="comment">//默认使用UTF8读取文件,一次读3个字节</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(FileInputStream fis,String charsetName)</span></span>;   <span class="comment">//指定编码读文件</span></span><br></pre></td></tr></table></figure><h4 id="5-2-OutputStreamWriter"><a href="#5-2-OutputStreamWriter" class="headerlink" title="5.2 OutputStreamWriter"></a>5.2 OutputStreamWriter</h4><p><strong>字符流通向字节流的桥梁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(FileOutputStream fos)</span></span>; <span class="comment">//默认UTF-8</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(FileOutputStream fos,String charsetName)</span></span>;<span class="comment">//指定码表</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IO流&quot;&gt;&lt;a href=&quot;#IO流&quot; class=&quot;headerlink&quot; title=&quot;IO流&quot;&gt;&lt;/a&gt;IO流&lt;/h1&gt;&lt;h3 id=&quot;一、IO四大流&quot;&gt;&lt;a href=&quot;#一、IO四大流&quot; class=&quot;headerlink&quot; title=&quot;一、IO四大流
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://yoursite.com/2018/10/31/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/10/31/Linux常用命令/</id>
    <published>2018-10-31T11:10:52.715Z</published>
    <updated>2018-10-31T11:46:22.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="一、目录操作"><a href="#一、目录操作" class="headerlink" title="一、目录操作"></a>一、目录操作</h2><h3 id="1、ls-参数-（查看）"><a href="#1、ls-参数-（查看）" class="headerlink" title="1、ls[参数] （查看）"></a>1、ls[参数] （查看）</h3><p><strong>参数解释</strong></p><ul><li>-l   以详形式查询当前目录下所有的文件和目录，不包括隐藏文件和目录</li><li>-a 以精简形式查询当前目录下所有文件和目录，包含隐藏文件和目录</li></ul><p><strong>命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /      进入根目录</span><br><span class="line">ls        以精简形式查询当前目录下所有文件和目录</span><br><span class="line">ls -l 缩写：ll  以详形式查询当前目录下所有的文件和目录 </span><br><span class="line">ls -a                精简形式查询所有文件和目录</span><br><span class="line">ls -la               详细形式查询目录下的所有文件和目录</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Linux常用命令.assets/1540716587830.png" alt="1540716587830" title="">                </div>                <div class="image-caption">1540716587830</div>            </figure> <h3 id="2、目录"><a href="#2、目录" class="headerlink" title="2、目录"></a>2、目录</h3><h4 id="2-1-切换目录"><a href="#2-1-切换目录" class="headerlink" title="2.1 切换目录"></a>2.1 切换目录</h4><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a><strong>命令</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~当前用户目录</span><br><span class="line">cd /根目录</span><br><span class="line">cd -上一次访问的目录</span><br><span class="line">cd ../上一级目录</span><br><span class="line">cd缺省当前用户目录</span><br></pre></td></tr></table></figure><h4 id="2-2-显示当前工作目录"><a href="#2-2-显示当前工作目录" class="headerlink" title="2.2 显示当前工作目录"></a>2.2 显示当前工作目录</h4><p><strong>命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd显示当前工作目录</span><br></pre></td></tr></table></figure><h3 id="3、创建目录"><a href="#3、创建目录" class="headerlink" title="3、创建目录"></a>3、创建目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd / 位于根目录</span><br><span class="line">mkdir aaa在当前目录下创建aaa目录，相对路径</span><br><span class="line">mkdir ./bbb在当前目录下创建bbb目录，相对路径</span><br><span class="line">mkdir /ccc在根目录下创建ccc目录，绝对路径</span><br></pre></td></tr></table></figure><h3 id="4、查找"><a href="#4、查找" class="headerlink" title="4、查找"></a>4、查找</h3><p><strong>语法</strong>：find目录   -name  ‘条件’</p><p><strong>命令</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">find  / -name <span class="string">'b'</span>   查询根目录下（包括子目录），名为b的目录和文件</span><br><span class="line">find  / -name <span class="string">'b*'</span>查询根目录下（包括子目录），名为b开头的目录和文件</span><br><span class="line">在Linux中，ctr+c     强行终止程序执行</span><br></pre></td></tr></table></figure><h3 id="5、修改"><a href="#5、修改" class="headerlink" title="5、修改"></a>5、修改</h3><p><strong>语法：</strong>mv  旧目录   新目录</p><p>对目录或者文件重命名</p><p><strong>命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">mv aaa bbb   将根目录下的aaa目录修改为bbb</span><br></pre></td></tr></table></figure><h3 id="6、剪切"><a href="#6、剪切" class="headerlink" title="6、剪切"></a>6、剪切</h3><p><strong>语法：</strong>mv 源目录位置  新目录位置</p><p>对目录进行移动</p><p><strong>命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">mv /aaa /bbb将根目录下的aaa目录移动到bbb目录下。</span><br><span class="line">mv bbb /usr/bbbb 将当前目录下的bbb目录移动到usr目录下，且修改名为bbbb</span><br></pre></td></tr></table></figure><h3 id="7、拷贝"><a href="#7、拷贝" class="headerlink" title="7、拷贝"></a>7、拷贝</h3><p><strong>语法</strong>：cp[参数] 目录 目录新位置</p><p><strong>参数解释:</strong></p><ul><li><p>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件 </p></li><li><p>-f：覆盖已经存在的目标文件而不给出提示 </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">cp -r /aaa /bbb  将/目录下的aaa目录复制到/bbb目录下.</span><br><span class="line">cp -r /aaa /bbb/aaaa   将/目录下的aaa目录复制到/bbb目录下，且修改名为aaaa</span><br><span class="line">           <span class="comment">//当路径中后面的目录不存在是最后一级目录是修改拷贝的目录名</span></span><br><span class="line">           <span class="comment">//当修改名称时只能最后一级的目录不存在 如果存在两级目录不存在则报错</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Linux常用命令.assets/1540798574355.png" alt="1540798574355" title="">                </div>                <div class="image-caption">1540798574355</div>            </figure><h3 id="8、删除"><a href="#8、删除" class="headerlink" title="8、删除"></a>8、删除</h3><p><strong>语法：</strong>rm [参数] 目录</p><p><strong>参数解释：</strong></p><ul><li>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li>-r 将目录及以下之档案亦逐一删除。</li></ul><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">rm -r /aaa询问式删除/目录下的aaa目录</span><br><span class="line">    如果aaa目录下还存在子目录，则进入aaa目录下的所有子目录，依次询问</span><br><span class="line">rm -rf /bbb  强行删除/目录下的bbb目录 连同子目录一起删除</span><br></pre></td></tr></table></figure><h2 id="二、文件操作"><a href="#二、文件操作" class="headerlink" title="二、文件操作"></a>二、文件操作</h2><h3 id="1、增加"><a href="#1、增加" class="headerlink" title="1、增加"></a>1、增加</h3><p><strong>语法：</strong>touch 文件名</p><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /aaaa</span><br><span class="line">touch a.java     <span class="comment">//在aaaa目录下创建a.java文件</span></span><br><span class="line">touch b.txt</span><br><span class="line">touch c.xml</span><br></pre></td></tr></table></figure><h3 id="2、查看"><a href="#2、查看" class="headerlink" title="2、查看"></a>2、查看</h3><p><strong>语法：</strong>cat/more/less/head/tall 文件名</p><p>以只读方式查看文件的内容</p><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /aaaa</span><br><span class="line">cat  a.java    <span class="comment">//查看a.java文件的最后一页内容</span></span><br><span class="line">more a.java    <span class="comment">//从第一页开始查看，回车键出现一行，空格键出一页</span></span><br><span class="line">less a.java    <span class="comment">//从第一页开始查看，回车键出现一行，空格键出一页</span></span><br><span class="line">  <span class="comment">// 支持使用pageDown和pageUp翻页，q退出</span></span><br><span class="line">  </span><br><span class="line">head a.java        <span class="comment">//查看钱10行</span></span><br><span class="line">tail a.java        <span class="comment">//查看后10行</span></span><br><span class="line">head -n <span class="number">7</span> a.java   <span class="comment">//查看前7行内容</span></span><br><span class="line">tail -n <span class="number">7</span> a.java   <span class="comment">//查看后7行内容</span></span><br></pre></td></tr></table></figure><h3 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h3><p><strong>语法：</strong>rm [参数] 文件</p><p><strong>参数解释:</strong></p><ul><li>-r 递归处理，对于文件删除，这个参数可带可不带</li><li>-f 强制删除文件，它不会询问你</li></ul><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /aaaa</span><br><span class="line">rm -rf a.java     <span class="comment">//强制删除当前目录下的a.java文件</span></span><br></pre></td></tr></table></figure><h3 id="4、修改-vi-vim"><a href="#4、修改-vi-vim" class="headerlink" title="4、修改 vi/vim"></a>4、修改 vi/vim</h3><p>使用vi vim对文件进行编辑修改。</p><p><strong>使用步骤：</strong></p><p>1 用vim打开文件</p><p>2 按 i 进入插入模式   进行编辑操作</p><p>3  编辑完成后 按 esc键 从插入模式退出到一半模式</p><p>4 输入<strong>：</strong>进入底行命令模式 输入 <strong>wq</strong> 退出</p><p><strong>快捷键：</strong></p><p>编辑模式快捷键</p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>yy</td><td>复制当前行</td></tr><tr><td>p</td><td>粘贴</td></tr><tr><td>dd</td><td>删除当前行</td></tr><tr><td>G</td><td>到文件的最后一行</td></tr></tbody></table><p>底行模式快捷键</p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>:wq</td><td>保存退出</td></tr><tr><td>:q</td><td>退出vi(文件五修改的情况下)</td></tr><tr><td>:q!</td><td>不保存强制退出</td></tr></tbody></table><h3 id="4、压缩"><a href="#4、压缩" class="headerlink" title="4、压缩"></a>4、压缩</h3><p>windows中的压缩文件的扩展名：.zip或者rar</p><p>Linux中的打包文件扩展名：.tar</p><p>Linux中的压缩文件扩展名：.gz</p><p>Linux中打包压缩的文件扩展名：.tar .gz</p><h4 id="4-1-打包"><a href="#4-1-打包" class="headerlink" title="4.1 打包"></a>4.1 打包</h4><p><strong>压缩语法：</strong>tar[参数]  打包压缩后的文件名   要打包压缩的文件名 </p><p><strong>参数解释：</strong></p><ul><li>-c 创建新的文件(必选项)</li><li>-f 文件名由命令台设置(必选项)</li><li>-v 输出文件清单(可选项)</li><li>-z 自动识别压缩或解压(可选项)</li></ul><p><strong>常用方式：</strong> tar -zcvf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">mkdir aaa</span><br><span class="line">cd    aaa</span><br><span class="line">touch a.java</span><br><span class="line">touch b.java</span><br><span class="line">touch c.java</span><br><span class="line">tar   -zcvf   haha.tar.gz a.java b.java c.java</span><br><span class="line">或</span><br><span class="line">tar   -zcvf   haha.tar.gz   .<span class="comment">/*   </span></span><br><span class="line"><span class="comment">//将当前目录项的所有文件打包压缩成haha.tar.gz文件</span></span><br></pre></td></tr></table></figure><h4 id="4-2-解压缩"><a href="#4-2-解压缩" class="headerlink" title="4.2 解压缩"></a>4.2 解压缩</h4><p><strong>压缩语法：</strong>tar[参数]   压缩文件</p><p>解压后的文件在当前的目录中</p><p><strong>解压语法：</strong>tar [参数] 压缩文件 -C目录</p><p>解压后的文件放入制定的目录中，C是大写,后面没有空格</p><p><strong>参数解释：</strong></p><ul><li>-x 取出文件中的内容(必选项)</li><li>-f 文件名由命令台设置(必选项)</li><li>-v 输出文件清单(可选项)</li><li>-z 自动识别压缩或解压(可选项)</li></ul><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf haha.tar.gz   <span class="comment">//解压到当前目录下</span></span><br><span class="line">tar -xvf haha.tar.gz -C/usr/local  <span class="comment">//解压文件到制定的目录下</span></span><br></pre></td></tr></table></figure><h2 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h2><h3 id="1、查看进程"><a href="#1、查看进程" class="headerlink" title="1、查看进程"></a>1、查看进程</h3><p><strong>语法：</strong>ps[参数]</p><p><strong>常用参数组合：</strong></p><p>ps-ef</p><p>ps-au</p><p><strong>参数解释：</strong></p><ul><li>无 显示当前用户通过终端启动所有的进程</li><li>-a显示所有用户通过终端启动的所有进程</li><li>-u 显示所有用户通过终端启动的所有进程的详细信息</li><li>-x 显示所有用户通过终端和非终端启动的所有进程的详细信息，内容相当多，少用</li><li>-f  显示UID PPIP  C STIME栏位</li></ul><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps au    显示所有有用通过终端启动的所有进程的详细信息</span><br></pre></td></tr></table></figure><h3 id="2、杀死进程"><a href="#2、杀死进程" class="headerlink" title="2、杀死进程"></a>2、杀死进程</h3><p><strong>语法：</strong>kill[参数] 进程号</p><p>先用ps -au 或 ps -ef 来确认一下当前需要杀死进程号，再用kill进程号 将这个进程结束</p><p><strong>参数解释：</strong></p><ul><li>无 普通式删除进程号对应的进程</li><li>-9  强制式删除进程号对应的进程</li></ul><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">1128</span>         <span class="comment">//杀死1128进程号，如果杀不了，用下面的命令</span></span><br><span class="line">kill -<span class="number">9</span> <span class="number">1128</span>      <span class="comment">//强制性杀死1128进程号</span></span><br></pre></td></tr></table></figure><h3 id="3、搜索"><a href="#3、搜索" class="headerlink" title="3、搜索"></a>3、搜索</h3><p><strong>语法：</strong>grep[参数]  要搜索的字符串   文件名</p><p><strong>参数解释：</strong></p><ul><li>-i 搜索时不区分大小写</li><li>-n 显示匹配行及行号 大小写敏感</li><li>-v  显示不匹配行及行号，大小写敏感</li></ul><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep as <span class="number">123</span>.txt    <span class="comment">//在123.txt文件中搜索as字符串，区分大小写，显示行</span></span><br><span class="line">grep -n as <span class="number">123</span>.txt <span class="comment">//在123.txt文件中搜索as字符串，区分大小写，显示行及行号</span></span><br><span class="line">grep -v as <span class="number">123</span>.txt <span class="comment">//在123.txt文件中搜索as字符串，区分大小写，显示没搜到的行</span></span><br><span class="line">grep -i as <span class="number">123</span>.txt <span class="comment">//在123.txt文件中搜索as字符串，不区分大小写，显示行</span></span><br><span class="line">grep -ni <span class="string">"Q q"</span> <span class="number">123</span>.txt <span class="comment">//在123.txt文件中搜索Q q字符串，不区分大小写，显示行及行号</span></span><br></pre></td></tr></table></figure><h3 id="4、关机"><a href="#4、关机" class="headerlink" title="4、关机"></a>4、关机</h3><p><strong>语法：</strong>halt</p><p><strong>命令：</strong> hatl  正常关闭安装的linux虚拟机</p><h3 id="5、重启"><a href="#5、重启" class="headerlink" title="5、重启"></a>5、重启</h3><p><strong>语法：</strong>reboot</p><p><strong>命令：</strong>reboot     重新启动安装Linux的虚拟机</p><h3 id="4、文件权限"><a href="#4、文件权限" class="headerlink" title="4、文件权限"></a>4、文件权限</h3><h4 id="4-1-权限的简介"><a href="#4-1-权限的简介" class="headerlink" title="4.1 权限的简介"></a>4.1 权限的简介</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Linux常用命令.assets/1540804356351.png" alt="1540804356351" title="">                </div>                <div class="image-caption">1540804356351</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Linux常用命令.assets/1540804388251.png" alt="1540804388251" title="">                </div>                <div class="image-caption">1540804388251</div>            </figure><h4 id="4-2-操作权限"><a href="#4-2-操作权限" class="headerlink" title="4.2 操作权限"></a>4.2 操作权限</h4><p>chmod(change mode) 功能：变更文件或目录的权限</p><p><strong>参数：</strong></p><ul><li>递归处理，将制定目录下的所有文件及子目录一并删除。</li></ul><p><strong>命令：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x <span class="number">1</span>.txt       给<span class="number">1</span>.txt的拥有者添加执行的权限</span><br><span class="line">chmod <span class="number">755</span> <span class="number">1</span>.txt      </span><br><span class="line">chmod <span class="number">777</span> a.txt       给所有人添加所有属性</span><br></pre></td></tr></table></figure><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h1&gt;&lt;h2 id=&quot;一、目录操作&quot;&gt;&lt;a href=&quot;#一、目录操作&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
</feed>
